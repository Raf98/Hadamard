$date
    Nov 27, 2023  03:45:42
$end
$version
    TOOL:	ncsim(64)	09.20-p007
$end
$timescale
    1 fs
$end

$scope module HadamardPipeline1SamplePerCycle_vhd_tst $end

$scope module pipe1sample $end
$var wire      8 !    a0 [7:0] $end
$var wire      8 "    a1 [7:0] $end
$var wire      8 #    a2 [7:0] $end
$var wire      8 $    a3 [7:0] $end
$var wire      1 %    b0 [7] $end
$var wire      1 &    b0 [6] $end
$var wire      1 '    b0 [5] $end
$var wire      1 (    b0 [4] $end
$var wire      1 )    b0 [3] $end
$var wire      1 *    b0 [2] $end
$var wire      1 +    b0 [1] $end
$var wire      1 ,    b0 [0] $end
$var wire      8 -    b1 [7:0] $end
$var wire      8 .    b2 [7:0] $end
$var wire      8 /    b3 [7:0] $end
$var wire      1 0    c0 [8] $end
$var wire      1 1    c0 [7] $end
$var wire      1 2    c0 [6] $end
$var wire      1 3    c0 [5] $end
$var wire      1 4    c0 [4] $end
$var wire      1 5    c0 [3] $end
$var wire      1 6    c0 [2] $end
$var wire      1 7    c0 [1] $end
$var wire      1 8    c0 [0] $end
$var wire      9 9    c1 [8:0] $end
$var wire      9 :    c2 [8:0] $end
$var wire      9 ;    c3 [8:0] $end
$var wire      9 <    d0 [8:0] $end
$var wire      9 =    d1 [8:0] $end
$var wire      9 >    d2 [8:0] $end
$var wire      9 ?    d3 [8:0] $end
$var wire      1 @    e0 [8] $end
$var wire      1 A    e0 [7] $end
$var wire      1 B    e0 [6] $end
$var wire      1 C    e0 [5] $end
$var wire      1 D    e0 [4] $end
$var wire      1 E    e0 [3] $end
$var wire      1 F    e0 [2] $end
$var wire      1 G    e0 [1] $end
$var wire      1 H    e0 [0] $end
$var wire      9 I    e1 [8:0] $end
$var wire      9 J    e2 [8:0] $end
$var wire      9 K    e3 [8:0] $end
$var wire      1 L    f0 [9] $end
$var wire      1 M    f0 [8] $end
$var wire      1 N    f0 [7] $end
$var wire      1 O    f0 [6] $end
$var wire      1 P    f0 [5] $end
$var wire      1 Q    f0 [4] $end
$var wire      1 R    f0 [3] $end
$var wire      1 S    f0 [2] $end
$var wire      1 T    f0 [1] $end
$var wire      1 U    f0 [0] $end
$var wire     10 V    f1 [9:0] $end
$var wire     10 W    f2 [9:0] $end
$var wire     10 X    f3 [9:0] $end
$var wire      1 Y    g0 [9] $end
$var wire      1 Z    g0 [8] $end
$var wire      1 [    g0 [7] $end
$var wire      1 \    g0 [6] $end
$var wire      1 ]    g0 [5] $end
$var wire      1 ^    g0 [4] $end
$var wire      1 _    g0 [3] $end
$var wire      1 `    g0 [2] $end
$var wire      1 a    g0 [1] $end
$var wire      1 b    g0 [0] $end
$var wire     10 c    g1 [9:0] $end
$var wire     10 d    g2 [9:0] $end
$var wire     10 e    g3 [9:0] $end
$var wire      1 f    carry [8] $end
$var wire      1 g    carry [7] $end
$var wire      1 h    carry [6] $end
$var wire      1 i    carry [5] $end
$var wire      1 j    carry [4] $end
$var wire      1 k    carry [3] $end
$var wire      1 l    carry [2] $end
$var wire      1 m    carry [1] $end
$var wire      1 n    carry [0] $end
$var wire      1 o    sub0  $end
$var wire      1 p    sub1  $end
$var wire      1 q    sel0 [1] $end
$var wire      1 r    sel0 [0] $end
$var wire      1 s    sel1 [1] $end
$var wire      1 t    sel1 [0] $end
$var wire      2 u    selReg0 [1:0] $end
$var wire      2 v    selReg1 [1:0] $end
$var wire      2 w    counter [1:0] $end
$var wire      1 x    clock  $end
$var wire      1 y    clear  $end
$var wire      8 z    w [7:0] $end
$var wire      9 {    x0 [8:0] $end
$var wire     10 |    z0 [9:0] $end
$var wire      8 }    y0 [7:0] $end
$var wire      8 ~    y1 [7:0] $end
$var wire      8 !!   y2 [7:0] $end
$var wire      8 "!   y3 [7:0] $end
$var wire      9 #!   v0 [8:0] $end
$var wire      9 $!   v1 [8:0] $end
$var wire      9 %!   v2 [8:0] $end
$var wire      9 &!   v3 [8:0] $end
$var wire      2 '!   s0 [1:0] $end
$var wire      2 (!   s1 [1:0] $end
$var wire      1 )!   u0  $end
$var wire      1 *!   u1  $end
$var wire      9 +!   s [8:0] $end

$scope module Buffer0 $end
$var wire      8 ,!   regBank [0] $end
$var wire      8 -!   regBank [1] $end
$var wire      8 .!   regBank [2] $end
$var wire      8 /!   regBank [3] $end
$var wire      2 u    adressWrite [1:0] $end
$var wire      8 z    dataWrite [7:0] $end
$var wire      8 !    w0 [7:0] $end
$var wire      8 "    w1 [7:0] $end
$var wire      8 #    w2 [7:0] $end
$var wire      8 $    w3 [7:0] $end
$var wire      1 x    clk  $end
$var wire      1 0!   writeRegister  $end
$upscope $end


$scope module MuxMulti0 $end
$var wire      8 !    a [7:0] $end
$var wire      8 "    b [7:0] $end
$var wire      1 r    sel  $end
$var wire      1 %    s [7] $end
$var wire      1 &    s [6] $end
$var wire      1 '    s [5] $end
$var wire      1 (    s [4] $end
$var wire      1 )    s [3] $end
$var wire      1 *    s [2] $end
$var wire      1 +    s [1] $end
$var wire      1 ,    s [0] $end
$upscope $end


$scope module MuxMulti1 $end
$var wire      8 #    a [7:0] $end
$var wire      8 $    b [7:0] $end
$var wire      1 q    sel  $end
$var wire      8 -    s [7:0] $end
$upscope $end


$scope module Adder0 $end
$var wire      1 1!   c [8] $end
$var wire      1 2!   c [7] $end
$var wire      1 3!   c [6] $end
$var wire      1 4!   c [5] $end
$var wire      1 5!   c [4] $end
$var wire      1 6!   c [3] $end
$var wire      1 7!   c [2] $end
$var wire      1 8!   c [1] $end
$var wire      1 9!   c [0] $end
$var wire      1 :!   bOp [7] $end
$var wire      1 ;!   bOp [6] $end
$var wire      1 <!   bOp [5] $end
$var wire      1 =!   bOp [4] $end
$var wire      1 >!   bOp [3] $end
$var wire      1 ?!   bOp [2] $end
$var wire      1 @!   bOp [1] $end
$var wire      1 A!   bOp [0] $end
$var wire      1 B!   x [7] $end
$var wire      1 C!   x [6] $end
$var wire      1 D!   x [5] $end
$var wire      1 E!   x [4] $end
$var wire      1 F!   x [3] $end
$var wire      1 G!   x [2] $end
$var wire      1 H!   x [1] $end
$var wire      1 I!   x [0] $end
$var wire      1 J!   over  $end
$var wire      1 K!   c0  $end
$var wire      1 %    a [7] $end
$var wire      1 &    a [6] $end
$var wire      1 '    a [5] $end
$var wire      1 (    a [4] $end
$var wire      1 )    a [3] $end
$var wire      1 *    a [2] $end
$var wire      1 +    a [1] $end
$var wire      1 ,    a [0] $end
$var wire      8 -    b [7:0] $end
$var wire      1 o    op  $end
$var wire      1 1    s [7] $end
$var wire      1 2    s [6] $end
$var wire      1 3    s [5] $end
$var wire      1 4    s [4] $end
$var wire      1 5    s [3] $end
$var wire      1 6    s [2] $end
$var wire      1 7    s [1] $end
$var wire      1 8    s [0] $end
$var wire      1 m    cLast  $end

$scope begin generateAdders(0) $end

$scope module FA $end
$var wire      1 9!   cin  $end
$var wire      1 ,    a  $end
$var wire      1 A!   b  $end
$var wire      1 I!   s  $end
$var wire      1 8!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(1) $end

$scope module FA $end
$var wire      1 8!   cin  $end
$var wire      1 +    a  $end
$var wire      1 @!   b  $end
$var wire      1 H!   s  $end
$var wire      1 7!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(2) $end

$scope module FA $end
$var wire      1 7!   cin  $end
$var wire      1 *    a  $end
$var wire      1 ?!   b  $end
$var wire      1 G!   s  $end
$var wire      1 6!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(3) $end

$scope module FA $end
$var wire      1 6!   cin  $end
$var wire      1 )    a  $end
$var wire      1 >!   b  $end
$var wire      1 F!   s  $end
$var wire      1 5!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(4) $end

$scope module FA $end
$var wire      1 5!   cin  $end
$var wire      1 (    a  $end
$var wire      1 =!   b  $end
$var wire      1 E!   s  $end
$var wire      1 4!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(5) $end

$scope module FA $end
$var wire      1 4!   cin  $end
$var wire      1 '    a  $end
$var wire      1 <!   b  $end
$var wire      1 D!   s  $end
$var wire      1 3!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(6) $end

$scope module FA $end
$var wire      1 3!   cin  $end
$var wire      1 &    a  $end
$var wire      1 ;!   b  $end
$var wire      1 C!   s  $end
$var wire      1 2!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(7) $end

$scope module FA $end
$var wire      1 2!   cin  $end
$var wire      1 %    a  $end
$var wire      1 :!   b  $end
$var wire      1 B!   s  $end
$var wire      1 1!   cout  $end
$upscope $end

$upscope $end

$upscope $end


$scope module Buffer1 $end
$var wire      9 L!   regBank [0] $end
$var wire      9 M!   regBank [1] $end
$var wire      9 N!   regBank [2] $end
$var wire      9 O!   regBank [3] $end
$var wire      2 v    adressWrite [1:0] $end
$var wire      1 0    dataWrite [8] $end
$var wire      1 1    dataWrite [7] $end
$var wire      1 2    dataWrite [6] $end
$var wire      1 3    dataWrite [5] $end
$var wire      1 4    dataWrite [4] $end
$var wire      1 5    dataWrite [3] $end
$var wire      1 6    dataWrite [2] $end
$var wire      1 7    dataWrite [1] $end
$var wire      1 8    dataWrite [0] $end
$var wire      9 <    w0 [8:0] $end
$var wire      9 =    w1 [8:0] $end
$var wire      9 >    w2 [8:0] $end
$var wire      9 ?    w3 [8:0] $end
$var wire      1 x    clk  $end
$var wire      1 P!   writeRegister  $end
$upscope $end


$scope module MuxMulti2 $end
$var wire      9 <    a [8:0] $end
$var wire      9 >    b [8:0] $end
$var wire      1 t    sel  $end
$var wire      1 @    s [8] $end
$var wire      1 A    s [7] $end
$var wire      1 B    s [6] $end
$var wire      1 C    s [5] $end
$var wire      1 D    s [4] $end
$var wire      1 E    s [3] $end
$var wire      1 F    s [2] $end
$var wire      1 G    s [1] $end
$var wire      1 H    s [0] $end
$upscope $end


$scope module MuxMulti3 $end
$var wire      9 =    a [8:0] $end
$var wire      9 ?    b [8:0] $end
$var wire      1 s    sel  $end
$var wire      9 I    s [8:0] $end
$upscope $end


$scope module Adder1 $end
$var wire      1 Q!   c [9] $end
$var wire      1 R!   c [8] $end
$var wire      1 S!   c [7] $end
$var wire      1 T!   c [6] $end
$var wire      1 U!   c [5] $end
$var wire      1 V!   c [4] $end
$var wire      1 W!   c [3] $end
$var wire      1 X!   c [2] $end
$var wire      1 Y!   c [1] $end
$var wire      1 Z!   c [0] $end
$var wire      1 [!   bOp [8] $end
$var wire      1 \!   bOp [7] $end
$var wire      1 ]!   bOp [6] $end
$var wire      1 ^!   bOp [5] $end
$var wire      1 _!   bOp [4] $end
$var wire      1 `!   bOp [3] $end
$var wire      1 a!   bOp [2] $end
$var wire      1 b!   bOp [1] $end
$var wire      1 c!   bOp [0] $end
$var wire      1 d!   x [8] $end
$var wire      1 e!   x [7] $end
$var wire      1 f!   x [6] $end
$var wire      1 g!   x [5] $end
$var wire      1 h!   x [4] $end
$var wire      1 i!   x [3] $end
$var wire      1 j!   x [2] $end
$var wire      1 k!   x [1] $end
$var wire      1 l!   x [0] $end
$var wire      1 m!   over  $end
$var wire      1 n!   c0  $end
$var wire      1 @    a [8] $end
$var wire      1 A    a [7] $end
$var wire      1 B    a [6] $end
$var wire      1 C    a [5] $end
$var wire      1 D    a [4] $end
$var wire      1 E    a [3] $end
$var wire      1 F    a [2] $end
$var wire      1 G    a [1] $end
$var wire      1 H    a [0] $end
$var wire      9 I    b [8:0] $end
$var wire      1 p    op  $end
$var wire      1 M    s [8] $end
$var wire      1 N    s [7] $end
$var wire      1 O    s [6] $end
$var wire      1 P    s [5] $end
$var wire      1 Q    s [4] $end
$var wire      1 R    s [3] $end
$var wire      1 S    s [2] $end
$var wire      1 T    s [1] $end
$var wire      1 U    s [0] $end
$var wire      1 l    cLast  $end

$scope begin generateAdders(0) $end

$scope module FA $end
$var wire      1 Z!   cin  $end
$var wire      1 H    a  $end
$var wire      1 c!   b  $end
$var wire      1 l!   s  $end
$var wire      1 Y!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(1) $end

$scope module FA $end
$var wire      1 Y!   cin  $end
$var wire      1 G    a  $end
$var wire      1 b!   b  $end
$var wire      1 k!   s  $end
$var wire      1 X!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(2) $end

$scope module FA $end
$var wire      1 X!   cin  $end
$var wire      1 F    a  $end
$var wire      1 a!   b  $end
$var wire      1 j!   s  $end
$var wire      1 W!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(3) $end

$scope module FA $end
$var wire      1 W!   cin  $end
$var wire      1 E    a  $end
$var wire      1 `!   b  $end
$var wire      1 i!   s  $end
$var wire      1 V!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(4) $end

$scope module FA $end
$var wire      1 V!   cin  $end
$var wire      1 D    a  $end
$var wire      1 _!   b  $end
$var wire      1 h!   s  $end
$var wire      1 U!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(5) $end

$scope module FA $end
$var wire      1 U!   cin  $end
$var wire      1 C    a  $end
$var wire      1 ^!   b  $end
$var wire      1 g!   s  $end
$var wire      1 T!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(6) $end

$scope module FA $end
$var wire      1 T!   cin  $end
$var wire      1 B    a  $end
$var wire      1 ]!   b  $end
$var wire      1 f!   s  $end
$var wire      1 S!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(7) $end

$scope module FA $end
$var wire      1 S!   cin  $end
$var wire      1 A    a  $end
$var wire      1 \!   b  $end
$var wire      1 e!   s  $end
$var wire      1 R!   cout  $end
$upscope $end

$upscope $end


$scope begin generateAdders(8) $end

$scope module FA $end
$var wire      1 R!   cin  $end
$var wire      1 @    a  $end
$var wire      1 [!   b  $end
$var wire      1 d!   s  $end
$var wire      1 Q!   cout  $end
$upscope $end

$upscope $end

$upscope $end


$scope module SR $end
$var wire      1 L    a [9] $end
$var wire      1 M    a [8] $end
$var wire      1 N    a [7] $end
$var wire      1 O    a [6] $end
$var wire      1 P    a [5] $end
$var wire      1 Q    a [4] $end
$var wire      1 R    a [3] $end
$var wire      1 S    a [2] $end
$var wire      1 T    a [1] $end
$var wire      1 U    a [0] $end
$var wire      1 Y    s [9] $end
$var wire      1 Z    s [8] $end
$var wire      1 [    s [7] $end
$var wire      1 \    s [6] $end
$var wire      1 ]    s [5] $end
$var wire      1 ^    s [4] $end
$var wire      1 _    s [3] $end
$var wire      1 `    s [2] $end
$var wire      1 a    s [1] $end
$var wire      1 b    s [0] $end

$scope begin generateShifters(0) $end

$scope module SR $end
$var wire      1 T    a  $end
$var wire      1 U    b  $end
$var wire      1 o!   sel  $end
$var wire      1 b    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(1) $end

$scope module SR $end
$var wire      1 S    a  $end
$var wire      1 T    b  $end
$var wire      1 p!   sel  $end
$var wire      1 a    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(2) $end

$scope module SR $end
$var wire      1 R    a  $end
$var wire      1 S    b  $end
$var wire      1 q!   sel  $end
$var wire      1 `    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(3) $end

$scope module SR $end
$var wire      1 Q    a  $end
$var wire      1 R    b  $end
$var wire      1 r!   sel  $end
$var wire      1 _    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(4) $end

$scope module SR $end
$var wire      1 P    a  $end
$var wire      1 Q    b  $end
$var wire      1 s!   sel  $end
$var wire      1 ^    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(5) $end

$scope module SR $end
$var wire      1 O    a  $end
$var wire      1 P    b  $end
$var wire      1 t!   sel  $end
$var wire      1 ]    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(6) $end

$scope module SR $end
$var wire      1 N    a  $end
$var wire      1 O    b  $end
$var wire      1 u!   sel  $end
$var wire      1 \    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(7) $end

$scope module SR $end
$var wire      1 M    a  $end
$var wire      1 N    b  $end
$var wire      1 v!   sel  $end
$var wire      1 [    s  $end
$upscope $end

$upscope $end


$scope begin generateShifters(8) $end

$scope module SR $end
$var wire      1 L    a  $end
$var wire      1 M    b  $end
$var wire      1 w!   sel  $end
$var wire      1 Z    s  $end
$upscope $end

$upscope $end


$scope module SR $end
$var wire      1 x!   a  $end
$var wire      1 L    b  $end
$var wire      1 y!   sel  $end
$var wire      1 Y    s  $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
bX !
bX "
bX #
bX $
X%
X&
X'
X(
X)
X*
X+
X,
bX -
bX .
bX /
X0
X1
X2
X3
X4
X5
X6
X7
X8
bX 9
bX :
bX ;
bX <
bX =
bX >
bX ?
X@
XA
XB
XC
XD
XE
XF
XG
XH
bX I
bX J
bX K
XL
XM
XN
XO
XP
XQ
XR
XS
XT
XU
bX V
bX W
bX X
XY
XZ
X[
X\
X]
X^
X_
X`
Xa
Xb
bX c
bX d
bX e
Xf
Xg
Xh
Xi
Xj
Xk
Xl
Xm
Xn
Xo
Xp
Xq
Xr
Xs
Xt
bX u
bX v
b0 w
Xx
Xy
bX z
bX {
bX |
bX }
bX ~
bX !!
bX "!
bX #!
bX $!
bX %!
bX &!
bX '!
bX (!
X)!
X*!
bX +!
bX ,!
bX -!
bX .!
bX /!
10!
X1!
X2!
X3!
X4!
X5!
X6!
X7!
X8!
X9!
X:!
X;!
X<!
X=!
X>!
X?!
X@!
XA!
XB!
XC!
XD!
XE!
XF!
XG!
XH!
XI!
XJ!
0K!
bX L!
bX M!
bX N!
bX O!
1P!
XQ!
XR!
XS!
XT!
XU!
XV!
XW!
XX!
XY!
XZ!
X[!
X\!
X]!
X^!
X_!
X`!
Xa!
Xb!
Xc!
Xd!
Xe!
Xf!
Xg!
Xh!
Xi!
Xj!
Xk!
Xl!
Xm!
0n!
0o!
0p!
0q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
0y!
$end
